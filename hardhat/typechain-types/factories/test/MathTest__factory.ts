/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MathTest, MathTestInterface } from "../../test/MathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "sqrt",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061031f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063677342ce1461003b5780637ae2b5c71461006b575b600080fd5b6100556004803603810190610050919061018f565b61009b565b60405161006291906101cb565b60405180910390f35b610085600480360381019061008091906101e6565b6100ad565b60405161009291906101cb565b60405180910390f35b60006100a6826100c1565b9050919050565b60006100b9838361013b565b905092915050565b6000600382111561012857819050600060016002846100e09190610284565b6100ea91906102b5565b90505b818110156101225780915060028182856101079190610284565b61011191906102b5565b61011b9190610284565b90506100ed565b50610136565b6000821461013557600190505b5b919050565b600081831061014a578161014c565b825b905092915050565b600080fd5b6000819050919050565b61016c81610159565b811461017757600080fd5b50565b60008135905061018981610163565b92915050565b6000602082840312156101a5576101a4610154565b5b60006101b38482850161017a565b91505092915050565b6101c581610159565b82525050565b60006020820190506101e060008301846101bc565b92915050565b600080604083850312156101fd576101fc610154565b5b600061020b8582860161017a565b925050602061021c8582860161017a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061028f82610159565b915061029a83610159565b9250826102aa576102a9610226565b5b828204905092915050565b60006102c082610159565b91506102cb83610159565b92508282019050808211156102e3576102e2610255565b5b9291505056fea2646970667358221220bb575a2c0779e21c447d78821a9d5de3653c3b79d9b229461a2fde06b137e89064736f6c63430008120033";

type MathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathTest__factory extends ContractFactory {
  constructor(...args: MathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MathTest> {
    return super.deploy(overrides || {}) as Promise<MathTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MathTest {
    return super.attach(address) as MathTest;
  }
  override connect(signer: Signer): MathTest__factory {
    return super.connect(signer) as MathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathTestInterface {
    return new utils.Interface(_abi) as MathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathTest {
    return new Contract(address, _abi, signerOrProvider) as MathTest;
  }
}
